{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nconst initialInputstate = {\n  value: \"\",\n  isTouched: false\n};\nconst inputSateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return {\n      value: actio\n    };\n  }\n  if (action.type === 'BLUR') {}\n  if (action.type === 'RESET') {}\n  return inputSateReducer;\n};\nconst useInput = validateValue => {\n  _s();\n  const [inputstate, dispatch] = useReducer(inputSateReducer, initialInputstate);\n  const valueIsValid = validateValue(inputstate.value);\n  const hasError = !valueIsValid && inputstate.isTouched;\n  const valueChangeHandler = event => {\n    dispatch({\n      type: \"INPUT\",\n      value: event.target.value\n    });\n  };\n  const inputBlurHandler = event => {\n    dispatch({\n      type: \"BLUR\"\n    });\n  };\n  const reset = () => {\n    dispatch({\n      type: 'RESET'\n    });\n  };\n  return {\n    value: inputstate.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"NlzMIahgADxger4H3emQDk/3A84=\");\nexport default useInput;","map":{"version":3,"names":["useReducer","initialInputstate","value","isTouched","inputSateReducer","state","action","type","actio","useInput","validateValue","_s","inputstate","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"sources":["/Users/deligence/Documents/REACT/project 11/src/hooks/UseInput.js"],"sourcesContent":["import { useReducer } from \"react\";\n\nconst initialInputstate = {\n  value: \"\",\n  isTouched: false,\n};\nconst inputSateReducer = (state, action) => {\n    if(action.type === 'INPUT'){\n        return {value:actio}\n    }\n    if(action.type === 'BLUR'){\n\n    }\n    if(action.type === 'RESET'){\n\n    }\n  return inputSateReducer;\n};\n\nconst useInput = (validateValue) => {\n  const [inputstate, dispatch] = useReducer(\n    inputSateReducer,\n    initialInputstate\n  );\n\n  const valueIsValid = validateValue(inputstate.value);\n  const hasError = !valueIsValid && inputstate.isTouched;\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: \"INPUT\", value: event.target.value });\n  };\n  const inputBlurHandler = (event) => {\n    dispatch({ type: \"BLUR\",});\n  };\n  const reset = () => {\n    dispatch({type:'RESET'})\n  };\n  return {\n    value: inputstate.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\nexport default useInput;\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE;AACb,CAAC;AACD,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACxC,IAAGA,MAAM,CAACC,IAAI,KAAK,OAAO,EAAC;IACvB,OAAO;MAACL,KAAK,EAACM;IAAK,CAAC;EACxB;EACA,IAAGF,MAAM,CAACC,IAAI,KAAK,MAAM,EAAC,CAE1B;EACA,IAAGD,MAAM,CAACC,IAAI,KAAK,OAAO,EAAC,CAE3B;EACF,OAAOH,gBAAgB;AACzB,CAAC;AAED,MAAMK,QAAQ,GAAIC,aAAa,IAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGb,UAAU,CACvCI,gBAAgB,EAChBH,iBAAiB,CAClB;EAED,MAAMa,YAAY,GAAGJ,aAAa,CAACE,UAAU,CAACV,KAAK,CAAC;EACpD,MAAMa,QAAQ,GAAG,CAACD,YAAY,IAAIF,UAAU,CAACT,SAAS;EAEtD,MAAMa,kBAAkB,GAAIC,KAAK,IAAK;IACpCJ,QAAQ,CAAC;MAAEN,IAAI,EAAE,OAAO;MAAEL,KAAK,EAAEe,KAAK,CAACC,MAAM,CAAChB;IAAM,CAAC,CAAC;EACxD,CAAC;EACD,MAAMiB,gBAAgB,GAAIF,KAAK,IAAK;IAClCJ,QAAQ,CAAC;MAAEN,IAAI,EAAE;IAAO,CAAC,CAAC;EAC5B,CAAC;EACD,MAAMa,KAAK,GAAGA,CAAA,KAAM;IAClBP,QAAQ,CAAC;MAACN,IAAI,EAAC;IAAO,CAAC,CAAC;EAC1B,CAAC;EACD,OAAO;IACLL,KAAK,EAAEU,UAAU,CAACV,KAAK;IACvBmB,OAAO,EAAEP,YAAY;IACrBC,QAAQ;IACRC,kBAAkB;IAClBG,gBAAgB;IAChBC;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CA1BIF,QAAQ;AA2Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
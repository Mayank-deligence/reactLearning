{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nconst initialInputstate = {\n  value: \"\",\n  isTouched: false\n};\nconst inputSateReducer = (state, action) => {\n  return inputSateReducer;\n};\nconst useInput = validateValue => {\n  _s();\n  const [] = useReducer(inputSateReducer, initialInputstate);\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"vm7hobZgFhw+hcX0mAHoer3kFO8=\");\nexport default useInput;","map":{"version":3,"names":["useReducer","initialInputstate","value","isTouched","inputSateReducer","state","action","useInput","validateValue","_s","enteredValue","setEnteredValue","useState","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"sources":["/Users/deligence/Documents/REACT/project 11/src/hooks/UseInput.js"],"sourcesContent":["import { useReducer } from \"react\";\n\nconst initialInputstate = {\n  value: \"\",\n  isTouched: false,\n};\nconst inputSateReducer = (state, action) => {\n    return inputSateReducer;\n};\n\nconst useInput = (validateValue) => {\n  const []=useReducer(inputSateReducer, initialInputstate);\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n  const inputBlurHandler = (event) => {\n    setIsTouched(true);\n  };\n  const reset = () => {\n    setEnteredValue(\"\");\n    setIsTouched(false);\n  };\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\nexport default useInput;\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAElC,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE;AACb,CAAC;AACD,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACxC,OAAOF,gBAAgB;AAC3B,CAAC;AAED,MAAMG,QAAQ,GAAIC,aAAa,IAAK;EAAAC,EAAA;EAClC,MAAM,EAAE,GAACT,UAAU,CAACI,gBAAgB,EAAEH,iBAAiB,CAAC;EACxD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACT,SAAS,EAAEU,YAAY,CAAC,GAAGD,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAME,YAAY,GAAGN,aAAa,CAACE,YAAY,CAAC;EAChD,MAAMK,QAAQ,GAAG,CAACD,YAAY,IAAIX,SAAS;EAE3C,MAAMa,kBAAkB,GAAIC,KAAK,IAAK;IACpCN,eAAe,CAACM,KAAK,CAACC,MAAM,CAAChB,KAAK,CAAC;EACrC,CAAC;EACD,MAAMiB,gBAAgB,GAAIF,KAAK,IAAK;IAClCJ,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EACD,MAAMO,KAAK,GAAGA,CAAA,KAAM;IAClBT,eAAe,CAAC,EAAE,CAAC;IACnBE,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EACD,OAAO;IACLX,KAAK,EAAEQ,YAAY;IACnBW,OAAO,EAAEP,YAAY;IACrBC,QAAQ;IACRC,kBAAkB;IAClBG,gBAAgB;IAChBC;EACF,CAAC;AACH,CAAC;AAACX,EAAA,CAzBIF,QAAQ;AA0Bd,eAAeA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}